{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Tahaa/Desktop/ProgrammData/GIT_REPOS/t-al-d-WebPortfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild, HostListener } from \"@angular/core\";\nimport { Breakpoints } from \"@angular/cdk/layout\";\nimport { map, shareReplay } from \"rxjs/operators\";\nimport { Particle } from \"./Particles\";\nlet SideNavComponent = class SideNavComponent {\n  constructor(breakpointObserver, loaderService) {\n    this.breakpointObserver = breakpointObserver;\n    this.loaderService = loaderService; // auto-generated\n\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n    this.particlesArray = [];\n    this.allowMouseEffect = true;\n  } // after the view has been loaded or else exception gets thrown\n\n\n  ngAfterViewInit() {\n    this.loaderService.hide();\n    const tempCanvasContext = this.canvasRef.nativeElement.getContext(\"2d\"); // assin to extra variable for easier access\n\n    if (tempCanvasContext !== null) {\n      this.canvasContext = tempCanvasContext;\n    }\n  } // fill the array with new Particles\n\n\n  fillParticleArray(xPos, yPos) {\n    for (let i = 0; i < 7; i++) {\n      const particle = new Particle(xPos, yPos, Math.random() * 14 + 1, Math.random() * 3 - 1.5, Math.random() * 3 - 1.5, 0.1);\n      this.particlesArray.push(particle);\n    }\n  } // delete Particles wich habe become to small\n\n\n  emptyParticleArray() {\n    for (let i = 0; i < this.particlesArray.length; i++) {\n      const particle = this.particlesArray[i];\n\n      if (particle.size < 2) {\n        this.particlesArray.splice(i, 1);\n      }\n    }\n  } //draw the rectangle on the canvas\n\n\n  drawRectOnCanvas() {\n    this.particlesArray.forEach(particle => {\n      particle.update();\n      particle.draw(this.canvasContext);\n    });\n  } // clear the canvas to draw something new\n\n\n  clearCanvas() {\n    this.canvasContext.clearRect(0, 0, this.canvasRef.nativeElement.width, this.canvasRef.nativeElement.height);\n  } //run async while until array is empty\n\n\n  clearParticles() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      while (_this.particlesArray.length !== 0) {\n        _this.clearCanvas();\n\n        _this.drawRectOnCanvas();\n\n        _this.emptyParticleArray();\n\n        yield new Promise(f => setTimeout(f, 6)); // just for safety\n\n        if (_this.particlesArray.length === 0) {\n          break;\n        }\n      }\n    })();\n  } // user can decide if mouse effects are wished\n\n\n  toggleMouseEffect() {\n    this.allowMouseEffect = !this.allowMouseEffect;\n    this.clearParticles();\n  } // every once and while empty the particleArray\n\n\n  dissolveMouseEffects() {\n    this.clearParticles();\n  } // look out for mousemovements\n\n\n  onMouseMove(event) {\n    if (this.allowMouseEffect) {\n      if (this.canvasRef !== null) {\n        // make canvas fit better\n        this.canvasRef.nativeElement.width = window.innerWidth;\n        this.canvasRef.nativeElement.height = window.innerHeight;\n      }\n\n      if (this.canvasContext !== null) {\n        // important clear first, then draw\n        const correctionX = 165;\n        const correctionY = 120;\n        this.clearCanvas();\n        this.fillParticleArray(event.x - correctionX, event.y - correctionY);\n        this.drawRectOnCanvas();\n        this.emptyParticleArray();\n      }\n    }\n  }\n\n};\n\n__decorate([ViewChild(\"canvasRef\")], SideNavComponent.prototype, \"canvasRef\", void 0);\n\n__decorate([HostListener(\"window:scroll \", [\"$event\"]), HostListener(\"document:keydown\", [\"$event\"]), HostListener(\"document:mouseleave\", [\"$event\"]), HostListener(\"document:mousedown\", [\"$event\"])], SideNavComponent.prototype, \"dissolveMouseEffects\", null);\n\n__decorate([HostListener(\"document:mousemove\", [\"$event\"])], SideNavComponent.prototype, \"onMouseMove\", null);\n\nSideNavComponent = __decorate([Component({\n  selector: \"app-side-nav\",\n  templateUrl: \"./side-nav.component.html\",\n  styleUrls: [\"./side-nav.component.css\"]\n})], SideNavComponent);\nexport { SideNavComponent };","map":{"version":3,"mappings":";;AAAA,SACIA,SADJ,EAEIC,SAFJ,EAKIC,YALJ,QAMO,eANP;AAOA,SAA6BC,WAA7B,QAAgD,qBAAhD;AAEA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAQA,IAAaC,gBAAgB,GAA7B,MAAaA,gBAAb,CAA6B;EAQzBC,YACYC,kBADZ,EAEYC,aAFZ,EAEwC;IAD5B;IACA,mCAA4B,CATxC;;IACA,kBAAkC,KAAKD,kBAAL,CAC7BE,OAD6B,CACrBR,WAAW,CAACS,OADS,EAE7BC,IAF6B,CAG1BT,GAAG,CAAEU,MAAD,IAAYA,MAAM,CAACC,OAApB,CAHuB,EAI1BV,WAAW,EAJe,CAAlC;IAkBQ,sBAAkC,EAAlC;IACA,wBAAmB,IAAnB;EAVJ,CAXqB,CAuBzB;;;EACAW,eAAe;IACX,KAAKN,aAAL,CAAmBO,IAAnB;IACA,MAAMC,iBAAiB,GAAG,KAAKC,SAAL,CAAeC,aAAf,CAA6BC,UAA7B,CAAwC,IAAxC,CAA1B,CAFW,CAGX;;IACA,IAAIH,iBAAiB,KAAK,IAA1B,EAAgC;MAC5B,KAAKI,aAAL,GAAqBJ,iBAArB;IACH;EACJ,CA/BwB,CAiCzB;;;EACAK,iBAAiB,CAACC,IAAD,EAAeC,IAAf,EAA2B;IACxC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MACxB,MAAMC,QAAQ,GAAG,IAAIrB,QAAJ,CACbkB,IADa,EAEbC,IAFa,EAGbG,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqB,CAHR,EAIbD,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,GAJP,EAKbD,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,GALP,EAMb,GANa,CAAjB;MAQA,KAAKC,cAAL,CAAoBC,IAApB,CAAyBJ,QAAzB;IACH;EACJ,CA9CwB,CAgDzB;;;EACAK,kBAAkB;IACd,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKI,cAAL,CAAoBG,MAAxC,EAAgDP,CAAC,EAAjD,EAAqD;MACjD,MAAMC,QAAQ,GAAG,KAAKG,cAAL,CAAoBJ,CAApB,CAAjB;;MACA,IAAIC,QAAQ,CAACO,IAAT,GAAgB,CAApB,EAAuB;QACnB,KAAKJ,cAAL,CAAoBK,MAApB,CAA2BT,CAA3B,EAA8B,CAA9B;MACH;IACJ;EACJ,CAxDwB,CA0DzB;;;EACAU,gBAAgB;IACZ,KAAKN,cAAL,CAAoBO,OAApB,CAA6BV,QAAD,IAAa;MACrCA,QAAQ,CAACW,MAAT;MACAX,QAAQ,CAACY,IAAT,CAAc,KAAKjB,aAAnB;IACH,CAHD;EAIH,CAhEwB,CAkEzB;;;EACAkB,WAAW;IACP,KAAKlB,aAAL,CAAmBmB,SAAnB,CACI,CADJ,EAEI,CAFJ,EAGI,KAAKtB,SAAL,CAAeC,aAAf,CAA6BsB,KAHjC,EAII,KAAKvB,SAAL,CAAeC,aAAf,CAA6BuB,MAJjC;EAMH,CA1EwB,CA4EzB;;;EACMC,cAAc;IAAA;;IAAA;MAChB,OAAO,KAAI,CAACd,cAAL,CAAoBG,MAApB,KAA+B,CAAtC,EAAyC;QACrC,KAAI,CAACO,WAAL;;QACA,KAAI,CAACJ,gBAAL;;QACA,KAAI,CAACJ,kBAAL;;QACA,MAAM,IAAIa,OAAJ,CAAaC,CAAD,IAAOC,UAAU,CAACD,CAAD,EAAI,CAAJ,CAA7B,CAAN,CAJqC,CAKrC;;QACA,IAAI,KAAI,CAAChB,cAAL,CAAoBG,MAApB,KAA+B,CAAnC,EAAsC;UAClC;QACH;MACJ;IAVe;EAWnB,CAxFwB,CA0FzB;;;EACAe,iBAAiB;IACb,KAAKC,gBAAL,GAAwB,CAAC,KAAKA,gBAA9B;IACA,KAAKL,cAAL;EACH,CA9FwB,CAgGzB;;;EAKAM,oBAAoB;IAChB,KAAKN,cAAL;EACH,CAvGwB,CAyGzB;;;EAEAO,WAAW,CAACC,KAAD,EAAkB;IACzB,IAAI,KAAKH,gBAAT,EAA2B;MACvB,IAAI,KAAK9B,SAAL,KAAmB,IAAvB,EAA6B;QACzB;QACA,KAAKA,SAAL,CAAeC,aAAf,CAA6BsB,KAA7B,GAAqCW,MAAM,CAACC,UAA5C;QACA,KAAKnC,SAAL,CAAeC,aAAf,CAA6BuB,MAA7B,GAAsCU,MAAM,CAACE,WAA7C;MACH;;MACD,IAAI,KAAKjC,aAAL,KAAuB,IAA3B,EAAiC;QAC7B;QACA,MAAMkC,WAAW,GAAG,GAApB;QACA,MAAMC,WAAW,GAAG,GAApB;QACA,KAAKjB,WAAL;QACA,KAAKjB,iBAAL,CACI6B,KAAK,CAACM,CAAN,GAAUF,WADd,EAEIJ,KAAK,CAACO,CAAN,GAAUF,WAFd;QAIA,KAAKrB,gBAAL;QACA,KAAKJ,kBAAL;MACH;IACJ;EACJ;;AA/HwB,CAA7B;;AAgBI4B,YADC3D,SAAS,CAAC,WAAD,CACV;;AAqFA2D,YAJC1D,YAAY,CAAC,gBAAD,EAAmB,CAAC,QAAD,CAAnB,CAIb,EAHCA,YAAY,CAAC,kBAAD,EAAqB,CAAC,QAAD,CAArB,CAGb,EAFCA,YAAY,CAAC,qBAAD,EAAwB,CAAC,QAAD,CAAxB,CAEb,EADCA,YAAY,CAAC,oBAAD,EAAuB,CAAC,QAAD,CAAvB,CACb;;AAMA0D,YADC1D,YAAY,CAAC,oBAAD,EAAuB,CAAC,QAAD,CAAvB,CACb;;AA3GSK,gBAAgB,eAL5BP,SAAS,CAAC;EACP6D,QAAQ,EAAE,cADH;EAEPC,WAAW,EAAE,2BAFN;EAGPC,SAAS,EAAE,CAAC,0BAAD;AAHJ,CAAD,CAKmB,GAAhBxD,gBAAgB,CAAhB;SAAAA","names":["Component","ViewChild","HostListener","Breakpoints","map","shareReplay","Particle","SideNavComponent","constructor","breakpointObserver","loaderService","observe","Handset","pipe","result","matches","ngAfterViewInit","hide","tempCanvasContext","canvasRef","nativeElement","getContext","canvasContext","fillParticleArray","xPos","yPos","i","particle","Math","random","particlesArray","push","emptyParticleArray","length","size","splice","drawRectOnCanvas","forEach","update","draw","clearCanvas","clearRect","width","height","clearParticles","Promise","f","setTimeout","toggleMouseEffect","allowMouseEffect","dissolveMouseEffects","onMouseMove","event","window","innerWidth","innerHeight","correctionX","correctionY","x","y","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Tahaa\\Desktop\\ProgrammData\\GIT_REPOS\\t-al-d-WebPortfolio\\src\\app\\side-nav\\side-nav.component.ts"],"sourcesContent":["import {\r\n    Component,\r\n    ViewChild,\r\n    ElementRef,\r\n    AfterViewInit,\r\n    HostListener,\r\n} from \"@angular/core\";\r\nimport { BreakpointObserver, Breakpoints } from \"@angular/cdk/layout\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map, shareReplay } from \"rxjs/operators\";\r\nimport { Particle } from \"./Particles\";\r\nimport { LoaderService } from \"../loadingService/loader.service\";\r\n\r\n@Component({\r\n    selector: \"app-side-nav\",\r\n    templateUrl: \"./side-nav.component.html\",\r\n    styleUrls: [\"./side-nav.component.css\"],\r\n})\r\nexport class SideNavComponent implements AfterViewInit {\r\n    // auto-generated\r\n    isHandset$: Observable<boolean> = this.breakpointObserver\r\n        .observe(Breakpoints.Handset)\r\n        .pipe(\r\n            map((result) => result.matches),\r\n            shareReplay()\r\n        );\r\n    constructor(\r\n        private breakpointObserver: BreakpointObserver,\r\n        private loaderService: LoaderService\r\n    ) {}\r\n    // auto-generated\r\n\r\n    // Access to a certain element in the DOM\r\n    @ViewChild(\"canvasRef\")\r\n    canvasRef!: ElementRef<HTMLCanvasElement>;\r\n\r\n    // variables needed\r\n    private canvasContext!: CanvasRenderingContext2D;\r\n    private particlesArray: Array<Particle> = [];\r\n    private allowMouseEffect = true;\r\n\r\n    // after the view has been loaded or else exception gets thrown\r\n    ngAfterViewInit(): void {\r\n        this.loaderService.hide();\r\n        const tempCanvasContext = this.canvasRef.nativeElement.getContext(\"2d\");\r\n        // assin to extra variable for easier access\r\n        if (tempCanvasContext !== null) {\r\n            this.canvasContext = tempCanvasContext;\r\n        }\r\n    }\r\n\r\n    // fill the array with new Particles\r\n    fillParticleArray(xPos: number, yPos: number) {\r\n        for (let i = 0; i < 7; i++) {\r\n            const particle = new Particle(\r\n                xPos,\r\n                yPos,\r\n                Math.random() * 14 + 1,\r\n                Math.random() * 3 - 1.5,\r\n                Math.random() * 3 - 1.5,\r\n                0.1\r\n            );\r\n            this.particlesArray.push(particle);\r\n        }\r\n    }\r\n\r\n    // delete Particles wich habe become to small\r\n    emptyParticleArray() {\r\n        for (let i = 0; i < this.particlesArray.length; i++) {\r\n            const particle = this.particlesArray[i];\r\n            if (particle.size < 2) {\r\n                this.particlesArray.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    //draw the rectangle on the canvas\r\n    drawRectOnCanvas() {\r\n        this.particlesArray.forEach((particle) => {\r\n            particle.update();\r\n            particle.draw(this.canvasContext);\r\n        });\r\n    }\r\n\r\n    // clear the canvas to draw something new\r\n    clearCanvas() {\r\n        this.canvasContext.clearRect(\r\n            0,\r\n            0,\r\n            this.canvasRef.nativeElement.width,\r\n            this.canvasRef.nativeElement.height\r\n        );\r\n    }\r\n\r\n    //run async while until array is empty\r\n    async clearParticles() {\r\n        while (this.particlesArray.length !== 0) {\r\n            this.clearCanvas();\r\n            this.drawRectOnCanvas();\r\n            this.emptyParticleArray();\r\n            await new Promise((f) => setTimeout(f, 6));\r\n            // just for safety\r\n            if (this.particlesArray.length === 0) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // user can decide if mouse effects are wished\r\n    toggleMouseEffect() {\r\n        this.allowMouseEffect = !this.allowMouseEffect;\r\n        this.clearParticles();\r\n    }\r\n\r\n    // every once and while empty the particleArray\r\n    @HostListener(\"window:scroll \", [\"$event\"])\r\n    @HostListener(\"document:keydown\", [\"$event\"])\r\n    @HostListener(\"document:mouseleave\", [\"$event\"])\r\n    @HostListener(\"document:mousedown\", [\"$event\"])\r\n    dissolveMouseEffects() {\r\n        this.clearParticles();\r\n    }\r\n\r\n    // look out for mousemovements\r\n    @HostListener(\"document:mousemove\", [\"$event\"])\r\n    onMouseMove(event: MouseEvent) {\r\n        if (this.allowMouseEffect) {\r\n            if (this.canvasRef !== null) {\r\n                // make canvas fit better\r\n                this.canvasRef.nativeElement.width = window.innerWidth;\r\n                this.canvasRef.nativeElement.height = window.innerHeight;\r\n            }\r\n            if (this.canvasContext !== null) {\r\n                // important clear first, then draw\r\n                const correctionX = 165;\r\n                const correctionY = 120;\r\n                this.clearCanvas();\r\n                this.fillParticleArray(\r\n                    event.x - correctionX,\r\n                    event.y - correctionY\r\n                );\r\n                this.drawRectOnCanvas();\r\n                this.emptyParticleArray();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}